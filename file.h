#include <stdio.h>
#include <stdlib.h>

char* lireFichier(char* filepath, int* filesize)

{

        char* buffer;
        int ch;
        int charCount = 1;
        FILE* fd;
        fd = fopen(filepath, "r");
        if(fd == NULL)
        {
                buffer[0] = 0;

                return buffer;
        }

        buffer = malloc(charCount);
        while((ch = fgetc(fd)) != EOF)
        {
                buffer[charCount - 1] = ch;

                charCount++;

                buffer = realloc(buffer, charCount);
        }
        fclose(fd);
        *filesize=charCount -1;
        return buffer;
}



int ecrireFichier(char* filepath, char* buffer, int buffersize)

{
    FILE* fichier;
    //FILE* fopen(const char* filename, const char* openmode);
    fichier = fopen(filepath, "wb");
    if(fichier == NULL)  return 1;
    /*
    "r" : read : lecture
    "w" : write : écriture et création du fichier s'il n'existe pas
    "a" : append : ajout à la fin du fichier création du fichier s'il n'existe pas
    "r+" : read+ : lecture + écriture le fichier doit avoir été créé
    "w+" : write+ : lecture + écriture après suppression du fichier
    "a+" : append+ : lecture + écriture à la fin, crée le fichier s'il n'existe pas
    "b" : écris de manière 'binary' pour dire osef au format
    */
    for(int i=0; i < buffersize; i++)
    {
        fputc(buffer[i], fichier);
    }
  //fprintf(fichier, "Vous vous appelez donc %s\n", nom); //la fonction qui permet d'écrire dans le fichier
    fclose(fichier);
    return (0);
}
void chiffrementDecalage(char* buffer, int buffersize, int decalage)
{
    for (int i = 0; i < buffersize; i++)
    {
        buffer[i] = buffer[i] + decalage;
    }
return;

}

char* genkey (int keysize)
{
    FILE* fd;
    char* clef = malloc(keysize);
    int maj;
    fd = fopen("/dev/urandom","r");

    for(int i = 0 ; i < keysize; i++)
    {
        maj = (fgetc(fd)) % 62;
        if(maj < 26) maj = (maj % 26) + 65;
        else if(maj > 52) maj = (maj % 10) + 48;
        else maj = (maj % 26) + 97; 
        clef[i] = maj;
    }

    return clef;
}

void XOR(char* buffer, int buffersize, char* clef, int keysize) 
{
    for (int i = 0; i < buffersize; i++) {
        buffer[i] = buffer[i] ^ clef[i % keysize];
    }
}


